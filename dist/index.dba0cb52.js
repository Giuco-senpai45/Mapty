"use strict";class Workout{date=new Date;id=(Date.now()+"").slice(-10);constructor(t,e,n){this.coords=t,this.distance=e,this.duration=n}_setDescription(){this.description=`${this.type[0].toUpperCase()}${this.type.slice(1)} on ${["January","February","March","April","May","June","July","August","September","October","November","December"][this.date.getMonth()]} ${this.date.getDate()}`}}class Running extends Workout{type="running";constructor(t,e,n,o){super(t,e,n),this.cadence=o,this.calcPace(),this._setDescription()}calcPace(){return this.pace=this.duration/this.distance,this.pace}}class Cycling extends Workout{type="cycling";constructor(t,e,n,o){super(t,e,n),this.elevationGain=o,this.calcSpeed(),this._setDescription()}calcSpeed(){return this.speed=this.distance/(this.duration/60),this.speed}}const form=document.querySelector(".form"),containerWorkouts=document.querySelector(".workouts"),inputType=document.querySelector(".form__input--type"),inputDistance=document.querySelector(".form__input--distance"),inputDuration=document.querySelector(".form__input--duration"),inputCadence=document.querySelector(".form__input--cadence"),inputElevation=document.querySelector(".form__input--elevation");class App{#t;#e;#n=13;#o=[];constructor(){this._getPosition(),this._getLocalStorage(),form.addEventListener("submit",this._newWorkout.bind(this)),inputType.addEventListener("change",this._toggleElevationField.bind(this)),containerWorkouts.addEventListener("click",this._moveToPopup.bind(this))}_getPosition(){navigator.geolocation&&navigator.geolocation.getCurrentPosition(this._loadMap.bind(this),(function(){alert("Could not get your position")}))}_loadMap(t){const{latitude:e}=t.coords,{longitude:n}=t.coords,o=[e,n];this.#t=L.map("map").setView(o,this.#n),L.tileLayer("https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png",{attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'}).addTo(this.#t),this.#t.on("click",this._showForm.bind(this)),this.#o.forEach((t=>{this._renderWorkoutMarker(t)}))}_showForm(t){this.#e=t,form.classList.remove("hidden"),inputDistance.focus()}_clearFields(){inputDistance.value=inputDuration.value=inputCadence.value=inputElevation.value=""}_hideForm(){this._clearFields(),form.style.display="none",form.classList.add("hidden"),setTimeout((()=>form.style.display="grid"),1e3)}_toggleElevationField(){inputElevation.closest(".form__row").classList.toggle("form__row--hidden"),inputCadence.closest(".form__row").classList.toggle("form__row--hidden")}_newWorkout(t){const e=(...t)=>t.every((t=>Number.isFinite(t))),n=(...t)=>t.every((t=>t>0));t.preventDefault();const o=inputType.value,i=+inputDistance.value,s=+inputDuration.value,{lat:a,lng:r}=this.#e.latlng;let u;if("running"===o){const t=+inputCadence.value;if(!e(i,s,t)||!n(i,s,t))return alert("Inputs have to be positive numbers!");u=new Running([a,r],i,s,t)}if("cycling"===o){const t=+inputElevation.value;if(!e(i,s,t)||!n(i,s))return alert("Inputs have to be positive numbers!");u=new Cycling([a,r],i,s,t)}this.#o.push(u),this._renderWorkoutMarker(u),this._renderWorkout(u),this._hideForm(),this._setLocalStorage()}_renderWorkoutMarker(t){L.marker(t.coords).addTo(this.#t).bindPopup(L.popup({maxWidth:250,minWidth:100,autoClose:!1,closeOnClick:!1,className:`${t.type}-popup`})).setPopupContent(`${"running"===t.type?"üèÉ‚Äç‚ôÇÔ∏è":"üö¥‚Äç‚ôÄÔ∏è"} ${t.description}`).openPopup()}_renderWorkout(t){let e=` \n    <li class="workout workout--${t.type}" data-id="${t.id}">\n      <h2 class="workout__title">${t.description}</h2>\n      <div class="workout__details">\n        <span class="workout__icon">${"running"===t.type?"üèÉ‚Äç‚ôÇÔ∏è":"üö¥‚Äç‚ôÄÔ∏è"}</span>\n        <span class="workout__value">${t.distance}</span>\n        <span class="workout__unit">km</span>\n      </div>\n      <div class="workout__details">\n        <span class="workout__icon">‚è±</span>\n        <span class="workout__value">${t.duration}</span>\n        <span class="workout__unit">min</span>\n      </div>\n      `;"running"===t.type&&(e+=`\n      <div class="workout__details">\n            <span class="workout__icon">‚ö°Ô∏è</span>\n            <span class="workout__value">${t.pace.toFixed(1)}</span>\n            <span class="workout__unit">min/km</span>\n          </div>\n          <div class="workout__details">\n            <span class="workout__icon">ü¶∂üèº</span>\n            <span class="workout__value">${t.cadence}</span>\n            <span class="workout__unit">spm</span>\n          </div>\n      </li>\n      `),"cycling"===t.type&&(e+=`\n      <div class="workout__details">\n            <span class="workout__icon">‚ö°Ô∏è</span>\n            <span class="workout__value">${t.speed.toFixed(1)}</span>\n            <span class="workout__unit">km/h</span>\n          </div>\n          <div class="workout__details">\n            <span class="workout__icon">‚õ∞</span>\n            <span class="workout__value">${t.elevationGain}</span>\n            <span class="workout__unit">m</span>\n          </div>\n      </li>\n      `),form.insertAdjacentHTML("afterend",e)}_moveToPopup(t){const e=t.target.closest(".workout");if(!e)return;const n=this.#o.find((t=>t.id===e.dataset.id));form.classList.remove("hidden"),inputDistance.value=n.distance,inputDuration.value=n.duration,inputType.value=n.type,this._toggleElevationField(),"running"===n.type&&(inputElevation.classList.contains("form__row--hidden")&&this._toggleElevationField(),inputCadence.value=n.cadence),"cycling"===n.type&&(inputCadence.classList.contains("form__row--hidden")&&this._toggleElevationField(),inputElevation.value=n.elevationGain),form.addEventListener("change",(function(t){t.distance=+inputDistance.value,t.duration=+inputDuration.value,"running"===t.type&&(t.cadence=+inputCadence.value),"cycling"===t.type&&(t.elevationGain=+inputElevation.value)}),this),this.#t.setView(n.coords,this.#n,{animate:!0,pan:{duration:1}})}_setLocalStorage(){localStorage.setItem("workouts",JSON.stringify(this.#o))}_getLocalStorage(){const t=JSON.parse(localStorage.getItem("workouts"));t&&(t.forEach((function(t){let e;"running"===t.type&&(e=new Running(t.coords,t.distance,t.duration,t.cadence)),"cycling"===t.type&&(e=new Cycling(t.coords,t.distance,t.duration,t.elevationGain)),this.#o.push(e)}),this),this.#o.forEach((t=>{this._renderWorkout(t)})))}reset(){localStorage.removeItem("workouts"),location.reload()}showWorkouts(){this.#o.forEach((t=>console.log(t)))}}const app=new App;
//# sourceMappingURL=index.dba0cb52.js.map
