{"mappings":"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","sources":["script.js"],"sourcesContent":["'use strict';\r\n\r\nclass Workout {\r\n  date = new Date();\r\n  id = (Date.now() + '').slice(-10);\r\n\r\n  constructor(coords, distance, duration) {\r\n    this.coords = coords; // [lat,lng]\r\n    this.distance = distance;\r\n    this.duration = duration;\r\n  }\r\n  _setDescription() {\r\n    // prettier-ignore\r\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${\r\n      months[this.date.getMonth()]\r\n    } ${this.date.getDate()}`;\r\n  }\r\n}\r\n\r\nclass Running extends Workout {\r\n  type = 'running';\r\n  constructor(coords, distance, duration, cadence) {\r\n    super(coords, distance, duration);\r\n    this.cadence = cadence;\r\n    this.calcPace();\r\n    this._setDescription();\r\n  }\r\n\r\n  calcPace() {\r\n    //min/km\r\n    this.pace = this.duration / this.distance;\r\n    return this.pace;\r\n  }\r\n}\r\n\r\nclass Cycling extends Workout {\r\n  type = 'cycling';\r\n  constructor(coords, distance, duration, elevationGain) {\r\n    super(coords, distance, duration);\r\n    this.elevationGain = elevationGain;\r\n    this.calcSpeed();\r\n    this._setDescription();\r\n  }\r\n  calcSpeed() {\r\n    this.speed = this.distance / (this.duration / 60);\r\n    return this.speed;\r\n  }\r\n}\r\n\r\nconst form = document.querySelector('.form');\r\nconst containerWorkouts = document.querySelector('.workouts');\r\nconst inputType = document.querySelector('.form__input--type');\r\nconst inputDistance = document.querySelector('.form__input--distance');\r\nconst inputDuration = document.querySelector('.form__input--duration');\r\nconst inputCadence = document.querySelector('.form__input--cadence');\r\nconst inputElevation = document.querySelector('.form__input--elevation');\r\n\r\nclass App {\r\n  #map;\r\n  #mapEvent;\r\n  #mapZoomLevel = 13;\r\n  #workouts = [];\r\n\r\n  constructor() {\r\n    //Get user position\r\n    this._getPosition();\r\n\r\n    //Get data from local storage\r\n    this._getLocalStorage();\r\n\r\n    //Attach event handlers\r\n    form.addEventListener('submit', this._newWorkout.bind(this));\r\n    inputType.addEventListener('change', this._toggleElevationField.bind(this));\r\n    containerWorkouts.addEventListener('click', this._moveToPopup.bind(this));\r\n  }\r\n\r\n  _getPosition() {\r\n    if (navigator.geolocation)\r\n      navigator.geolocation.getCurrentPosition(\r\n        this._loadMap.bind(this),\r\n        function () {\r\n          alert('Could not get your position');\r\n        }\r\n      );\r\n  }\r\n\r\n  _loadMap(position) {\r\n    const { latitude } = position.coords;\r\n    const { longitude } = position.coords;\r\n    // console.log(`https://www.google.pt/maps/@${latitude},${longitude}`);\r\n\r\n    const coords = [latitude, longitude];\r\n\r\n    this.#map = L.map('map').setView(coords, this.#mapZoomLevel);\r\n\r\n    L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {\r\n      attribution:\r\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n    }).addTo(this.#map);\r\n\r\n    //Handling clicks on map.\r\n    this.#map.on('click', this._showForm.bind(this));\r\n\r\n    this.#workouts.forEach(work => {\r\n      this._renderWorkoutMarker(work);\r\n    });\r\n  }\r\n\r\n  _showForm(mapE) {\r\n    this.#mapEvent = mapE;\r\n    form.classList.remove('hidden');\r\n    inputDistance.focus();\r\n  }\r\n\r\n  _clearFields() {\r\n    inputDistance.value =\r\n      inputDuration.value =\r\n      inputCadence.value =\r\n      inputElevation.value =\r\n        '';\r\n  }\r\n\r\n  _hideForm() {\r\n    this._clearFields();\r\n    form.style.display = 'none';\r\n    form.classList.add('hidden');\r\n    setTimeout(() => (form.style.display = 'grid'), 1000);\r\n  }\r\n\r\n  _toggleElevationField() {\r\n    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');\r\n    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');\r\n  }\r\n\r\n  _newWorkout(e) {\r\n    const validInputs = (...inputs) =>\r\n      inputs.every(inp => Number.isFinite(inp));\r\n\r\n    const allPositive = (...inputs) => inputs.every(inp => inp > 0);\r\n\r\n    e.preventDefault();\r\n\r\n    //Get data from form\r\n    const type = inputType.value;\r\n    const distance = +inputDistance.value;\r\n    const duration = +inputDuration.value;\r\n    const { lat, lng } = this.#mapEvent.latlng;\r\n    let workout;\r\n\r\n    //Check if data is valid\r\n\r\n    //If workout running create running obj\r\n    if (type === 'running') {\r\n      const cadence = +inputCadence.value;\r\n\r\n      // Check if data is valid\r\n      if (\r\n        !validInputs(distance, duration, cadence) ||\r\n        !allPositive(distance, duration, cadence)\r\n      )\r\n        return alert('Inputs have to be positive numbers!');\r\n\r\n      workout = new Running([lat, lng], distance, duration, cadence);\r\n    }\r\n\r\n    // If workout cycling, create cycling object\r\n    if (type === 'cycling') {\r\n      const elevation = +inputElevation.value;\r\n\r\n      if (\r\n        !validInputs(distance, duration, elevation) ||\r\n        !allPositive(distance, duration)\r\n      )\r\n        return alert('Inputs have to be positive numbers!');\r\n\r\n      workout = new Cycling([lat, lng], distance, duration, elevation);\r\n    }\r\n    //Add new object to workout array\r\n    this.#workouts.push(workout);\r\n\r\n    //Render workout on map as marker\r\n    this._renderWorkoutMarker(workout);\r\n\r\n    //Render workout on list\r\n    this._renderWorkout(workout);\r\n\r\n    //Clear input fields\r\n    this._hideForm();\r\n\r\n    //Set local storage to all workouts\r\n    this._setLocalStorage();\r\n  }\r\n\r\n  _renderWorkoutMarker(workout) {\r\n    //Display marker\r\n\r\n    L.marker(workout.coords)\r\n      .addTo(this.#map)\r\n      .bindPopup(\r\n        L.popup({\r\n          maxWidth: 250,\r\n          minWidth: 100,\r\n          autoClose: false,\r\n          closeOnClick: false,\r\n          className: `${workout.type}-popup`,\r\n        })\r\n      )\r\n      .setPopupContent(\r\n        `${workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'} ${workout.description}`\r\n      )\r\n      .openPopup();\r\n  }\r\n\r\n  _renderWorkout(workout) {\r\n    let html = ` \r\n    <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\r\n      <h2 class=\"workout__title\">${workout.description}</h2>\r\n      <div class=\"workout__details\">\r\n        <span class=\"workout__icon\">${\r\n          workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'\r\n        }</span>\r\n        <span class=\"workout__value\">${workout.distance}</span>\r\n        <span class=\"workout__unit\">km</span>\r\n      </div>\r\n      <div class=\"workout__details\">\r\n        <span class=\"workout__icon\">‚è±</span>\r\n        <span class=\"workout__value\">${workout.duration}</span>\r\n        <span class=\"workout__unit\">min</span>\r\n      </div>\r\n      `;\r\n\r\n    if (workout.type === 'running') {\r\n      html += `\r\n      <div class=\"workout__details\">\r\n            <span class=\"workout__icon\">‚ö°Ô∏è</span>\r\n            <span class=\"workout__value\">${workout.pace.toFixed(1)}</span>\r\n            <span class=\"workout__unit\">min/km</span>\r\n          </div>\r\n          <div class=\"workout__details\">\r\n            <span class=\"workout__icon\">ü¶∂üèº</span>\r\n            <span class=\"workout__value\">${workout.cadence}</span>\r\n            <span class=\"workout__unit\">spm</span>\r\n          </div>\r\n      </li>\r\n      `;\r\n    }\r\n\r\n    if (workout.type === 'cycling') {\r\n      html += `\r\n      <div class=\"workout__details\">\r\n            <span class=\"workout__icon\">‚ö°Ô∏è</span>\r\n            <span class=\"workout__value\">${workout.speed.toFixed(1)}</span>\r\n            <span class=\"workout__unit\">km/h</span>\r\n          </div>\r\n          <div class=\"workout__details\">\r\n            <span class=\"workout__icon\">‚õ∞</span>\r\n            <span class=\"workout__value\">${workout.elevationGain}</span>\r\n            <span class=\"workout__unit\">m</span>\r\n          </div>\r\n      </li>\r\n      `;\r\n    }\r\n\r\n    form.insertAdjacentHTML('afterend', html);\r\n  }\r\n\r\n  _moveToPopup(e) {\r\n    const workoutEl = e.target.closest('.workout');\r\n\r\n    if (!workoutEl) return;\r\n\r\n    const workout = this.#workouts.find(\r\n      work => work.id === workoutEl.dataset.id\r\n    );\r\n\r\n    form.classList.remove('hidden');\r\n    inputDistance.value = workout.distance;\r\n    inputDuration.value = workout.duration;\r\n\r\n    inputType.value = workout.type;\r\n    this._toggleElevationField();\r\n\r\n    if (workout.type === 'running') {\r\n      if (inputElevation.classList.contains('form__row--hidden'))\r\n        this._toggleElevationField();\r\n\r\n      inputCadence.value = workout.cadence;\r\n    }\r\n\r\n    if (workout.type === 'cycling') {\r\n      if (inputCadence.classList.contains('form__row--hidden'))\r\n        this._toggleElevationField();\r\n      inputElevation.value = workout.elevationGain;\r\n    }\r\n\r\n    form.addEventListener(\r\n      'change',\r\n      function (workout) {\r\n        workout.distance = +inputDistance.value;\r\n        workout.duration = +inputDuration.value;\r\n        if (workout.type === 'running') workout.cadence = +inputCadence.value;\r\n        if (workout.type === 'cycling')\r\n          workout.elevationGain = +inputElevation.value;\r\n      },\r\n      this\r\n    );\r\n\r\n    this.#map.setView(workout.coords, this.#mapZoomLevel, {\r\n      animate: true,\r\n      pan: {\r\n        duration: 1,\r\n      },\r\n    });\r\n  }\r\n\r\n  _setLocalStorage() {\r\n    localStorage.setItem('workouts', JSON.stringify(this.#workouts));\r\n  }\r\n\r\n  _getLocalStorage() {\r\n    const data = JSON.parse(localStorage.getItem('workouts'));\r\n\r\n    if (!data) return;\r\n\r\n    //Converting the data array which has normal objects back to the objects Running and Cycling that I use throughout the application.\r\n    data.forEach(function (work) {\r\n      let workout;\r\n\r\n      if (work.type === 'running') {\r\n        workout = new Running(\r\n          work.coords,\r\n          work.distance,\r\n          work.duration,\r\n          work.cadence\r\n        );\r\n      }\r\n\r\n      if (work.type === 'cycling') {\r\n        workout = new Cycling(\r\n          work.coords,\r\n          work.distance,\r\n          work.duration,\r\n          work.elevationGain\r\n        );\r\n      }\r\n      this.#workouts.push(workout);\r\n    }, this);\r\n\r\n    this.#workouts.forEach(work => {\r\n      this._renderWorkout(work);\r\n    });\r\n  }\r\n\r\n  reset() {\r\n    localStorage.removeItem('workouts');\r\n    location.reload();\r\n  }\r\n\r\n  showWorkouts() {\r\n    this.#workouts.forEach(work => console.log(work));\r\n  }\r\n}\r\n\r\nconst app = new App();\r\n"],"names":["Workout","date","Date","id","now","slice","coords","distance","duration","this","_setDescription","description","type","toUpperCase","getMonth","getDate","Running","coords1","distance1","duration1","cadence","super","calcPace","pace","Cycling","coords2","distance2","duration2","elevationGain","calcSpeed","speed","form","document","querySelector","containerWorkouts","inputType","inputDistance","inputDuration","inputCadence","inputElevation","App","map","mapEvent","mapZoomLevel","workouts","_getPosition","_getLocalStorage","addEventListener","_newWorkout","bind","_toggleElevationField","_moveToPopup","navigator","geolocation","getCurrentPosition","_loadMap","alert","position","latitude","longitude","L","setView","tileLayer","attribution","addTo","on","_showForm","forEach","work","_renderWorkoutMarker","mapE","classList","remove","focus","_clearFields","value","_hideForm","style","display","add","setTimeout","closest","toggle","e","validInputs","inputs","every","inp","Number","isFinite","allPositive","preventDefault","lat","lng","latlng","workout","elevation","push","_renderWorkout","_setLocalStorage","workout3","marker","bindPopup","popup","maxWidth","minWidth","autoClose","closeOnClick","className","setPopupContent","openPopup","workout1","html","toFixed","insertAdjacentHTML","e1","workoutEl","target","workout2","find","dataset","contains"],"version":3,"file":"index.dba0cb52.js.map"}